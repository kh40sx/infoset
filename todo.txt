    # Get the config file
    config = class_config.Config()

    # Get threads in pool
    sub_processes_in_pool = config.subprocess_pool_size()

    # Get OID data
    data.extend(_power_oids())
    data.extend(_current_oids())

    # Create the argument list
    for item in data:
        argument_list.append(
            (item, temp_dir, days)
        )

    # Create a pool of sub process resources
    with Pool(processes=sub_processes_in_pool) as pool:

        # Create sub processes from the pool
        pool.map(_wrapper_process, argument_list)

    # Wait for all the processes to end
    pool.join()


def _wrapper_process(argument_list):
    """Wrapper function to unpack arguments before calling the real function.

    Args:
        argument_list: A list of tuples of arguments to be provided to
            lib_process_devices.process_device

    Returns:
        Nothing

    """
    return _db2files_process(*argument_list)
